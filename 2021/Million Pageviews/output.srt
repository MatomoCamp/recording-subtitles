1
00:00:00,000 --> 00:00:09,300
So, everyone, thank you for attending this session.

2
00:00:09,300 --> 00:00:18,560
Today we will have Jorge Powers, who has been working for 10 years with analytics, CO, development

3
00:00:18,560 --> 00:00:19,560
and DevOps.

4
00:00:19,560 --> 00:00:27,400
His talk today is how to manage Omatomo with millions of page views per month, where he

5
00:00:27,400 --> 00:00:34,080
will tell us more about their work at Digitalist Sweden, a company which manages some of the

6
00:00:34,080 --> 00:00:37,840
biggest Omatomo installations in Sweden.

7
00:00:37,840 --> 00:00:43,080
So I'm giving the word to Jorge now.

8
00:00:43,080 --> 00:00:44,080
Thank you.

9
00:00:44,080 --> 00:01:04,600
As you heard, I've been working with analytics for many years.

10
00:01:04,600 --> 00:01:15,240
I've been programming since I was a kid in the 90s, but I started professionally about

11
00:01:15,240 --> 00:01:28,440
11, 12 years ago, working mostly as a front-ender from the beginning, but yeah, I wouldn't label

12
00:01:28,440 --> 00:01:33,680
me as front-end, back-end or SEO expert.

13
00:01:33,680 --> 00:01:43,000
I'm a generalist and I'm wherever I needed, so I'm a problem solver, you could call me.

14
00:01:43,000 --> 00:01:50,160
I have recently been on parental leave, so I'm just back working, so this presentation

15
00:01:50,160 --> 00:02:04,640
is put together recently, so bear with me, but I'm sure I can get any questions if you

16
00:02:04,640 --> 00:02:05,640
have any.

17
00:02:05,640 --> 00:02:08,520
Yeah, let's move on.

18
00:02:08,520 --> 00:02:14,920
So I work for Digitalist now, I've been here for six years, and I've been working with

19
00:02:14,920 --> 00:02:25,960
the DevOps team, I've been project manager, and I've been working with Omatomo for three

20
00:02:25,960 --> 00:02:30,520
or four years now in Digitalist.

21
00:02:30,520 --> 00:02:35,480
So what am I going to talk about?

22
00:02:35,480 --> 00:02:45,800
And we started with Omatomo, it was still called PIVIC, and everyone knows that GDPR

23
00:02:45,800 --> 00:03:00,520
in 2018 was getting in effect, so the government agencies in Sweden were very good at how to

24
00:03:00,520 --> 00:03:05,160
track the data and take ownership of the data.

25
00:03:05,160 --> 00:03:13,720
So the Swedish tax agency, Skatteverket, they had a procurement and reached out to

26
00:03:13,720 --> 00:03:22,880
us and asked us if we knew Omatomo, and we have had PIVIC installations running for probably

27
00:03:22,880 --> 00:03:37,120
ten years, so, but we were no experts yet, and we took on this, and yeah, so a little

28
00:03:37,120 --> 00:03:50,120
bit of the story, Sweden, it's a small country in Europe, if you look at the population,

29
00:03:50,120 --> 00:04:03,920
but still we have a million plus population in Sweden, and the fiscal declaration, I mean

30
00:04:03,920 --> 00:04:14,400
Sweden is very progressive when it comes to digitalization, and in 2021, 4.5 million people

31
00:04:14,400 --> 00:04:27,600
did their fiscal declaration online, and all of those people went into this declaration,

32
00:04:27,600 --> 00:04:35,640
and they have other online services as well and other websites, so a lot of traffic into

33
00:04:35,640 --> 00:04:48,600
their sites, and if you look at the timeline here and you think how big applications were

34
00:04:48,600 --> 00:05:06,080
driven back in the days, the entire app would run on a server, Apache or some kind of services,

35
00:05:06,080 --> 00:05:16,520
and then in 2014 Kubernetes came in and changed how the landscape of applications are deployed

36
00:05:16,520 --> 00:05:25,320
today, so, and we signed with Skatteverket just before 2018, and so we had a bit of time

37
00:05:25,320 --> 00:05:35,760
before May 25th, I think it was the date when GDPR was in effect, and at this time, if you

38
00:05:35,760 --> 00:05:44,460
downloaded the source code to PIVIC, like it was called back in the day, you could go

39
00:05:44,460 --> 00:05:57,560
to the online documentation and you see that it's a LAMP stack basically, so you have Linux,

40
00:05:57,560 --> 00:06:07,760
Apache, MySQL, and PHP, and for us, this is, yeah, we've been working with open source

41
00:06:07,760 --> 00:06:21,760
for 20 years or so, so this is a very familiar area for us, but the challenge here, because

42
00:06:21,760 --> 00:06:37,880
Kubernetes was open sourced in 2014, and yeah, it was a little clear how to host this big

43
00:06:37,880 --> 00:06:44,360
installation where we knew that we were going to have a lot of traffic, so we put together

44
00:06:44,360 --> 00:06:57,400
a team of our engineers to try to figure out the best option to go forward, yeah, until

45
00:06:57,400 --> 00:07:09,920
2019, we could find more documentation on the Matomo website to run a big installation

46
00:07:09,920 --> 00:07:18,840
for 100 million page views per month or less, but this is similar to the conclusion we came

47
00:07:18,840 --> 00:07:32,240
up with at the time, but when it comes to running this and monitoring and so on, there's

48
00:07:32,240 --> 00:07:40,240
still challenges, we can't just deploy some service and hope it will run for a long time,

49
00:07:40,240 --> 00:07:47,520
so we started to sketch our own infrastructure with guidance from the Matomo documentation,

50
00:07:47,520 --> 00:07:58,080
of course. At the time when we installed Matomo, MariaDB was still supported by Matomo, and

51
00:07:58,080 --> 00:08:12,440
I'm going to come back to that later, but how should we build a big application? A monolithic

52
00:08:12,440 --> 00:08:22,200
application you could say is where everything is compiled into source code and you will

53
00:08:22,200 --> 00:08:35,160
put it on a server and it will just sit there and run the whole application by itself, which

54
00:08:35,160 --> 00:08:47,240
you have services, you have the things that you see and the communication layer and the

55
00:08:47,240 --> 00:08:55,200
database basically, or microservices, so these were the options we were looking at the time

56
00:08:55,200 --> 00:09:08,200
and of course we can't deny that we had requirements from our clients, and now I'm imagining that

57
00:09:08,200 --> 00:09:12,720
there's a big crowd out there and you've probably seen a Rocky Horror Picture Show or something

58
00:09:12,720 --> 00:09:20,720
where the audience shout out the boo or whatever, so we had for example backups, we need to

59
00:09:20,720 --> 00:09:27,200
have backups, we need to have redundancy, we need to have security certified hosting,

60
00:09:27,200 --> 00:09:36,740
we need to have the status of the application, we need to have scalability because everyone

61
00:09:36,740 --> 00:09:42,880
doesn't go in to do their physical declaration once a month, this is something you do once

62
00:09:42,880 --> 00:09:50,800
a year probably. You need to be able to restore the systems if it goes down, you need to have

63
00:09:50,800 --> 00:09:59,280
a certified standards, you need to be able to roll back and we need high availability

64
00:09:59,280 --> 00:10:09,200
so that people from all over Sweden can go in and do their declarations basically. So

65
00:10:09,200 --> 00:10:17,580
we went through our hosting partner, we've been working with for many years and they

66
00:10:17,580 --> 00:10:25,680
are certified Kubernetes, the only one certified Kubernetes in the Nordics at the time, so

67
00:10:25,680 --> 00:10:32,520
they were of course proposing that we should run this on Kubernetes because it's the next

68
00:10:32,520 --> 00:10:44,120
big thing and that's in tech. We wanted to go with the Kubernetes setup and for us it

69
00:10:44,120 --> 00:10:55,040
was a black box, it's not the traditional way you should think about certain applications

70
00:10:55,040 --> 00:11:07,160
so we threw it to someone else, the works in Digitalis, we took some crash courses in

71
00:11:07,160 --> 00:11:19,200
Kubernetes and looking back at it now and I remember I was thinking like it was a big

72
00:11:19,200 --> 00:11:28,960
question mark in my head at the time but as more we dig into Kubernetes and everything

73
00:11:28,960 --> 00:11:35,960
around Kubernetes, everything became more clear. So you need to throw everything you

74
00:11:35,960 --> 00:11:43,320
know about servers and hosting out the window and you need to rethink how you think about

75
00:11:43,320 --> 00:11:51,240
applications and services. So this is a picture I took from the Kubernetes website and you

76
00:11:51,240 --> 00:12:03,520
can see the traditional deployment, you have something similar to the three-tire architecture

77
00:12:03,520 --> 00:12:17,160
or you can have VPSs and you could have Docker or some kind of auto scaling hosting, can't

78
00:12:17,160 --> 00:12:28,240
remember the name you call it or you could have like running container like microservices.

79
00:12:28,240 --> 00:12:34,960
So if you want to know what Kubernetes is in depth to the Kubernetes web page and there

80
00:12:34,960 --> 00:12:42,160
is a lot of documentation you can read but basically the things that we get out of the

81
00:12:42,160 --> 00:12:53,000
box here to meet the requirements was that we could have rollbacks, auto rollbacks, we

82
00:12:53,000 --> 00:13:04,080
can have real-time updates or raw updates and this means basically we can do the application

83
00:13:04,080 --> 00:13:11,040
without taking down the service. So if Skatteverke for example they have let's say a hundred

84
00:13:11,040 --> 00:13:22,480
data analysts and they go in and they work office time you know nine to five and we don't

85
00:13:22,480 --> 00:13:26,800
want to take down the application just if you want to run out if we want to deploy some

86
00:13:26,800 --> 00:13:44,040
configuration. So this needs to be very careful doing upgrades. Yeah so at the time because

87
00:13:44,040 --> 00:13:51,640
we were new to Kubernetes we had our partner Elastics they come up with the architecture

88
00:13:51,640 --> 00:13:58,240
so this is what it looked like from the start you could say we have changed some bits through

89
00:13:58,240 --> 00:14:12,520
the years but the basic concept still and so when a user either if you go into the dashboard

90
00:14:12,520 --> 00:14:25,440
as an analyst you get to one container you could say or if you have installed your tracking

91
00:14:25,440 --> 00:14:37,040
script the tracking data will be sending into servers. So this is how we can scale up and

92
00:14:37,040 --> 00:14:52,160
down depending on where the load is in the application. And of course when you dissect

93
00:14:52,160 --> 00:15:04,960
a big application like Matomo you're going to run into some challenges and I would say

94
00:15:04,960 --> 00:15:17,320
the biggest challenge at the time was configuring the database to handle all the load that was

95
00:15:17,320 --> 00:15:25,520
coming in and we could use many of the community everything was open source by the way I forgot

96
00:15:25,520 --> 00:15:32,840
to mention that but we are an open source company first of all so we like open source.

97
00:15:32,840 --> 00:15:39,720
We like to keep our infrastructure as code and the best way of doing that at the time

98
00:15:39,720 --> 00:15:48,240
with the help from our partner Elastics they come up with Helm. So Helm is a way to keep

99
00:15:48,240 --> 00:15:55,680
your charts as they call them the templates for your infrastructure. So this is how we

100
00:15:55,680 --> 00:16:05,480
can easily tweak bits and pieces of the application without having to access to a server and go

101
00:16:05,480 --> 00:16:11,760
in manually and change something. So every change needs to be documented so we can do

102
00:16:11,760 --> 00:16:28,960
this in our version controlling system with Git. Yeah so this is Helm and of course we

103
00:16:28,960 --> 00:16:37,840
have requirements as like you can't ship out code deploy code that have vulnerabilities

104
00:16:37,840 --> 00:16:44,160
in them. So we had to figure out some kind of CI CD workflow where we can automate stuff

105
00:16:44,160 --> 00:16:50,800
and because you can't really track all the vulnerabilities that come up all the time.

106
00:16:50,800 --> 00:17:06,840
So we automate as much as possible. We have a drone. A drone is a CI service where you

107
00:17:06,840 --> 00:17:12,920
can plug in different kind of applications third party system that will check your code

108
00:17:12,920 --> 00:17:21,360
your base code. So if you package all your Matomo into a container in Docker let's say

109
00:17:21,360 --> 00:17:33,280
and all the underlying system applications that are in this Docker image drone will start

110
00:17:33,280 --> 00:17:44,800
service and then we will use something that is called Clare which is the next slide here

111
00:17:44,800 --> 00:17:50,240
and also it's an open source service that will check for vulnerabilities. So everything

112
00:17:50,240 --> 00:17:59,600
is running containers. So before we deploy something out to our production site this

113
00:17:59,600 --> 00:18:08,800
will run up a similar environment where it will check for vulnerabilities and when we

114
00:18:08,800 --> 00:18:16,080
get a green light then we can do the deploy to the production and of course being an open

115
00:18:16,080 --> 00:18:22,400
source company and how much the community means for us we have also open sourced our

116
00:18:22,400 --> 00:18:32,080
Helm base setup so anyone can take our work and replicate what we have done. If you go

117
00:18:32,080 --> 00:18:42,640
to our GitHub you can find the Matomo Kubernetes base setup that we are using. Of course there

118
00:18:42,640 --> 00:18:52,840
are other dependencies so we use this as a base and then we have a different project

119
00:18:52,840 --> 00:19:10,560
where we open up every client we have. Of course dissecting an application like Matomo

120
00:19:10,560 --> 00:19:17,720
you want to have control you want to automate as much as possible so we are dependent on

121
00:19:17,720 --> 00:19:29,360
the CLI tools which at the time we couldn't use we can add new users so every deploy basically

122
00:19:29,360 --> 00:19:37,680
we destroy everything and we build a whole and if you know Matomo and how to install

123
00:19:37,680 --> 00:19:47,080
it basically it's a clean install every time so to be able to keep our database without

124
00:19:47,080 --> 00:19:55,440
wiping it and we had to come up with different CLI tools to automate some of the stuff so

125
00:19:55,440 --> 00:20:03,560
and we have contributed this back to the community and we have some plugins in the Matomo marketplace

126
00:20:03,560 --> 00:20:11,000
one of them we use is the user console but also most importantly I would say the extra

127
00:20:11,000 --> 00:20:24,640
tools where we can automate a lot of things like DB backups or installation of Matomo

128
00:20:24,640 --> 00:20:34,360
and I took the screenshot yesterday and it's been downloaded over 4,900 times I think that's

129
00:20:34,360 --> 00:20:59,800
fantastic. Yeah and this is more abstract overview of our application this is more...

130
00:20:59,800 --> 00:21:11,400
So in Kubernetes world you have called a pod and a pod can run multiple containers and

131
00:21:11,400 --> 00:21:24,240
you can have different pods so for example if you want to run the core archive job as

132
00:21:24,240 --> 00:21:30,880
the presentation before me you mentioned the core archive in the if you go into the server

133
00:21:30,880 --> 00:21:41,680
and you use the CLI tool you can run the archive command and in a cron job in Kubernetes world

134
00:21:41,680 --> 00:22:01,080
this is called a job just a job yeah so and because of the high load or the millions of

135
00:22:01,080 --> 00:22:10,280
page views every month a single core job wasn't enough for us so we tried to come up with

136
00:22:10,280 --> 00:22:16,160
different ways of running this which has led into other problems too and we have learned

137
00:22:16,160 --> 00:22:23,880
a lot during the years so and we have had discussions with the Matomo team to how to

138
00:22:23,880 --> 00:22:30,360
solve this properly the correct way and yeah I bet they have run into similar issues like

139
00:22:30,360 --> 00:22:39,840
we have and but they have probably solved them differently. Yeah of course monitoring

140
00:22:39,840 --> 00:22:45,680
is important to know when you need to scale up or scale down your applications so of course

141
00:22:45,680 --> 00:22:57,880
we use with Kubernetes it's very standard to use Prometheus that will check status and

142
00:22:57,880 --> 00:23:07,680
we use Grafana to visualize the metrics which is another tool very like Kibana if you're

143
00:23:07,680 --> 00:23:24,240
used to Kibana or Elastic Stack so yeah jumping into Kubernetes was a lot of fun but it's

144
00:23:24,240 --> 00:23:38,600
a lot to dig into because you need to know about a lot of stuff so fun yeah so just to

145
00:23:38,600 --> 00:23:44,440
give you a hint of how much how many page views we're dealing with here so I tweaked

146
00:23:44,440 --> 00:23:50,520
the numbers a little bit so I don't want to give away the real numbers but this is very

147
00:23:50,520 --> 00:23:59,760
like the real deal we have also other clients with even more data than this so we know what

148
00:23:59,760 --> 00:24:07,640
we're doing we have done this for many years now and if you look here the fiscal declaration

149
00:24:07,640 --> 00:24:16,920
for the Swedish tax payers it's opens up in Mars and you can see there's a peak because

150
00:24:16,920 --> 00:24:21,320
everyone wants to go in and to see their tax returns if they're getting anything or if

151
00:24:21,320 --> 00:24:28,000
they need to pay more taxes so this is something we can prepare for and we can scale up our

152
00:24:28,000 --> 00:24:44,640
services we can also under the hood we can also add more servers or hardware if you want

153
00:24:44,640 --> 00:24:52,280
so that's possible too so we but doing a migration that's something I would not recommend for

154
00:24:52,280 --> 00:24:58,920
anyone so if you want a big motormist you can advance so you have enough hardware in

155
00:24:58,920 --> 00:25:10,280
place because doing a migration is a tough project and so here's a little peak from one

156
00:25:10,280 --> 00:25:16,520
of our time where we override the values in our helm charts so this is something where

157
00:25:16,520 --> 00:25:22,240
we can prepare like is the fiscal declaration is coming up in its opening we know that we

158
00:25:22,240 --> 00:25:34,080
can we can add more replicas to the dashboard or to the tracker pods and if you look behind

159
00:25:34,080 --> 00:25:40,800
the red line you see also one of the console commands this is also one of the challenges

160
00:25:40,800 --> 00:25:48,280
we had because we couldn't at the time we couldn't use a read write many NFS folder

161
00:25:48,280 --> 00:26:01,520
so we had to come up with an idea how to regenerate tag manager containers so this is a way you

162
00:26:01,520 --> 00:26:06,960
can do that in the Kubernetes setup is to run the command so this is where the console

163
00:26:06,960 --> 00:26:17,840
commands are so important for us yeah we can also add more CPU more memory to each pod

164
00:26:17,840 --> 00:26:23,160
or group of pods I wouldn't recommend to do it individually per pod but you can you have

165
00:26:23,160 --> 00:26:36,920
a basic template and then you can tweak that for different services we have one that is

166
00:26:36,920 --> 00:26:44,720
tracking the tracking data is sent into a Redis middle layer where it stores because

167
00:26:44,720 --> 00:26:50,880
if the database is too busy we need to keep the data so it doesn't disappear or take down

168
00:26:50,880 --> 00:27:04,080
the database so this is how we can queue tracking service and this is a peak from the beginning

169
00:27:04,080 --> 00:27:11,400
we would only use CLI tools but now the bigger we get and the bigger the team gets we need

170
00:27:11,400 --> 00:27:23,720
to automate a lot of stuff this is a CICD workflow tools and there's called OCD which

171
00:27:23,720 --> 00:27:31,480
I think it's really awesome also open source of course where we can go in and see all the

172
00:27:31,480 --> 00:27:39,640
pods in a nice graphic view and can check logs or we can see the health the status and

173
00:27:39,640 --> 00:27:47,600
green heart means that everything is operational and running you see the magnitude of the pods

174
00:27:47,600 --> 00:27:57,040
or the microservices there is running in the background and yeah and this is a tool that

175
00:27:57,040 --> 00:28:07,720
I like that I've been using a lot through the years it's a K9 and it's a nice CLI visualization

176
00:28:07,720 --> 00:28:18,320
tool to see the health and status of your cluster so I can highly recommend to use K9s

177
00:28:18,320 --> 00:28:26,120
if you're more into sitting in a terminal than having a graphical overview yeah so the

178
00:28:26,120 --> 00:28:33,920
challenges we had through the years was the DB configuration and jumping into trying

179
00:28:33,920 --> 00:28:46,360
to debug a black box from the beginning to find throttles or bottlenecks in our application

180
00:28:46,360 --> 00:28:57,480
yeah it was yeah some of the ways we do it now we have added more shared all of those

181
00:28:57,480 --> 00:29:06,720
to the community yet because they're not ready for days I would say but we get enough of

182
00:29:06,720 --> 00:29:15,480
data to find if we want to run a MySQL tuner to check the health of the database we have

183
00:29:15,480 --> 00:29:21,960
automated a lot of stuff to do that nowadays and from the beginning MariaDB being an open

184
00:29:21,960 --> 00:29:27,920
source company and the fact that MySQL wasn't no longer open source or it was open source

185
00:29:27,920 --> 00:29:39,280
but kind of because they were acquired by Oracle we chose MariaDB and when Matomo added

186
00:29:39,280 --> 00:29:50,520
more features 2019 I think to run big Matomo installations they wouldn't support MariaDB

187
00:29:50,520 --> 00:30:00,720
and that was very frustrating sometimes I did a patch so I can do stuff now today that

188
00:30:00,720 --> 00:30:07,560
we couldn't do in MariaDB back then and then of course the core archives having a lot of

189
00:30:07,560 --> 00:30:15,880
data and one of my colleagues Thomas is going to talk more about some of the challenges

190
00:30:15,880 --> 00:30:24,680
we had or how you can break Matomo I think his session name is the title of his session

191
00:30:24,680 --> 00:30:31,520
and I would recommend to join his sessions because yeah he will talk more in detail how

192
00:30:31,520 --> 00:30:40,920
to break core archives and we had problems from the beginning with forms they would automatically

193
00:30:40,920 --> 00:30:50,080
include in every site that you put up in Matomo and that gave us a little bit of headache

194
00:30:50,080 --> 00:30:59,600
but we have dealt with that and the segments go hand in hand with core archives I would

195
00:30:59,600 --> 00:31:12,840
say because the Matomo features in the UI and having a lot of analysts working there

196
00:31:12,840 --> 00:31:22,680
and putting up their own segments with queries that are getting a lot of data from the database

197
00:31:22,680 --> 00:31:31,880
could potentially take down your application and of course the transitions because it's

198
00:31:31,880 --> 00:31:42,160
querying live and to add indexes to the database and yeah I don't think you I think we still

199
00:31:42,160 --> 00:31:48,920
have some problem with the transitions heat maps and session recordings I would say it

200
00:31:48,920 --> 00:31:56,120
works very well very well sometimes but sometimes it's you could spam the logs or we have one

201
00:31:56,120 --> 00:32:05,440
of our clients is using a network monitoring service that will traffic that it will detect

202
00:32:05,440 --> 00:32:14,760
as spam or denial of service attacks or whatever so this is something we didn't foresee and

203
00:32:14,760 --> 00:32:24,960
when one of our clients activated heat maps and session recordings so that was interesting

204
00:32:24,960 --> 00:32:34,040
so a quick recap because I think my time is running out here yeah so we use Docker Tomo

205
00:32:34,040 --> 00:32:42,280
has a Docker template if you go into the official Matomo github webpage you can search for their

206
00:32:42,280 --> 00:32:47,680
and we have we're of course hosting our own Docker template but I would say that's a good

207
00:32:47,680 --> 00:33:00,200
start if you want to run Matomo in a Docker setup in a cluster environment and yeah Kubernetes

208
00:33:00,200 --> 00:33:09,960
I've talked about a lot any questions feel free later let's see I have 10 minutes left

209
00:33:09,960 --> 00:33:16,040
yeah drone to automate stuff when we push our code into github or git lab or git lab

210
00:33:16,040 --> 00:33:20,680
is actually running their own CI service but drone is something you can integrate with

211
00:33:20,680 --> 00:33:30,320
your github repos and then clear to check for vulnerabilities in your in your images

212
00:33:30,320 --> 00:33:41,480
in your Docker images github git lab I mentioned there's probably something I have forgotten

213
00:33:41,480 --> 00:33:49,000
I think you get the big picture and it was an interesting journey I would say and I will

214
00:33:49,000 --> 00:34:18,360
leave room for questions and I will see if I can open up the chat here

215
00:34:18,360 --> 00:34:39,360
okay there's um hey Jorge I've shared some of the questions here in the chat okay yeah

216
00:34:39,360 --> 00:34:44,640
from Valentin in our chat thanks for contributing to open source with this repo you're welcome

217
00:34:44,640 --> 00:34:50,520
question have you ever used Matomo fake visitor plugin in order to have enough data within

218
00:34:50,520 --> 00:34:57,200
your Matomo data in order to make some crash tests do you make some crash tests with empty

219
00:34:57,200 --> 00:35:06,680
Matomo database the idea would be to educate ourselves about system administration yes

220
00:35:06,680 --> 00:35:15,680
I have used the fake visitor plugin and yes I wouldn't say that it's the best option to

221
00:35:15,680 --> 00:35:29,080
test a big data set because it takes a very long time to get enough of fake visitors so

222
00:35:29,080 --> 00:35:45,240
some of the penetration tests or the load done we have actually taken a big dump of

223
00:35:45,240 --> 00:35:54,160
of course with from a production because we want to have as like production as possible

224
00:35:54,160 --> 00:36:09,280
but I would say there's still we haven't figured out the perfect way to do this thing and if

225
00:36:09,280 --> 00:36:21,400
I could give any advice yeah there's there's a application I can't remember the name right

226
00:36:21,400 --> 00:36:34,280
now it's used a lot to load test the varnish for example I can't if you ping me I can't

227
00:36:34,280 --> 00:36:45,400
you in LinkedIn or Twitter I will share my links later okay question from Roberto with

228
00:36:45,400 --> 00:36:50,360
million of page views how big is your database have you ever met issues regarding the size

229
00:36:50,360 --> 00:37:05,560
of UDB and the archive process so I would say no it's I would say around it's steady

230
00:37:05,560 --> 00:37:10,840
around 800 gigabytes one terabyte I would say it goes up and down when we purchase some

231
00:37:10,840 --> 00:37:21,280
data sometimes after archivings are done some some of our clients have different requirements

232
00:37:21,280 --> 00:37:29,480
for example that they want they want to do some querying to the database one year after

233
00:37:29,480 --> 00:37:38,960
of course that database will grow very big but the class only store for 180 days so we

234
00:37:38,960 --> 00:37:46,600
can start to delete all logs after 180 days and that's it's more that's better for the

235
00:37:46,600 --> 00:37:57,440
application in whole I would say and you can also integrate Matomo to a data lake a hadouk

236
00:37:57,440 --> 00:38:05,520
hadouk cluster or Kafka or something if you want to be here so superset it's something

237
00:38:05,520 --> 00:38:16,400
we have been looking into if you want to do more pivoting of the datasets and asking big

238
00:38:16,400 --> 00:38:24,520
queries to the database so yeah and the archiving process yeah we have had a lot of issues I

239
00:38:24,520 --> 00:38:29,720
think we have if you want to follow our issues we have had through the years you can go into

240
00:38:29,720 --> 00:38:38,840
the Matomo issue queue and you can search for our core archive we have had but I think

241
00:38:38,840 --> 00:38:44,800
we have reached a level of acceptance now and one of the challenges I think Tomas is

242
00:38:44,800 --> 00:38:58,520
going to talk more about and it's about educating your analysts how to build segments or what

243
00:38:58,520 --> 00:39:09,560
else forms you have goals and all those different plugins or applications that needs some kind

244
00:39:09,560 --> 00:39:19,000
of archiving because if you do a too big query on a big dataset with a old type of monolithic

245
00:39:19,000 --> 00:39:31,320
database system or what is it called a tabular database like MySQL or MariaDB you will eventually

246
00:39:31,320 --> 00:39:39,400
hit some problems bottlenecks with you can always optimize the configuration but I think

247
00:39:39,400 --> 00:39:46,560
if you want to do big queries on a database you will need to integrate with some other

248
00:39:46,560 --> 00:39:58,760
system like superset that I just mentioned what else perhaps I missed a number of events

249
00:39:58,760 --> 00:40:06,360
at Skatteverket the figures you showed were page views right yes that is correct I don't

250
00:40:06,360 --> 00:40:16,400
know in from top of my head I don't know the events but since because they aren't using

251
00:40:16,400 --> 00:40:22,800
the tag manager as much as others some of other of our clients that uses a lot of single

252
00:40:22,800 --> 00:40:29,760
page applications we haven't had that many it doesn't differentiate that much of course

253
00:40:29,760 --> 00:40:46,920
there's a there's more events of course I can probably look I can jump to the next question

254
00:40:46,920 --> 00:40:50,800
is MariaDB not supporting Matomo or is it not recommended for large installations on

255
00:40:50,800 --> 00:41:07,840
Matomo yeah so the supporting of MariaDB was it two years ago I would say you can still

256
00:41:07,840 --> 00:41:14,360
install with MariaDB of course for small sites but for large installations if you want to

257
00:41:14,360 --> 00:41:27,960
use some configuration such as there are some MySQL specific configurations that Matomo

258
00:41:27,960 --> 00:41:37,800
is using and I think my time is up there and but of course you can reach out and somehow

259
00:41:37,800 --> 00:41:43,800
I will share my slides if you want to get in touch with me or ask more questions I will

260
00:41:43,800 --> 00:41:51,600
be more than happy to share them with you so thank you for your time thank you for listening

261
00:41:51,600 --> 00:42:14,720
and thank you for the MatomoCamp team awesome

